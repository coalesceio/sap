fileVersion: 1
id: "1"
macroString: |
  {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}

  {% if desiredState %}
      {% set columns = desiredState.columns %}
      {% set storageLocations = desiredState.storageLocations %}
      {% set config = desiredState.config %}
      {% set sources = desiredState.sources %}
      {% set node = desiredState.node %}
      {% set parameters = desiredState.parameters %}
  {% endif %}


  {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
  {#-- Input parmeters   - None #}
  {#-- Return            - Order by clause #}

  {%- macro sortorder_by_colv(return) -%}
      {%- set nsVariables = namespace(sortcolNames="") -%}
      {%if config.orderby %}
          {%- for i in config.orderbycolumn.get('items') -%}
              {%- set colName = i.sortColName.name -%}
              {%- set colOrder = i.sortOrder -%}
  	        {%- if loop.first -%}	      
  		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
  	        {%- else -%}      
  		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
  	        {%- endif -%}
          {%- endfor -%}	
              {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
   
      {% endif %} 
      
      {{- nsVariables.sortcolNames -}}
   
  {%- endmacro -%}




  {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
  {#-- Input parmeters   - joinclause #}
  {#-- Return            - from clause and other clauses #}


  {%- macro get_clause( joinclause , ret_clause ) -%}

              {% set join_clause = joinclause %}
              {% set has_where_clause = 'where'in join_clause %}
              {% set has_WHERE_clause = 'WHERE'in join_clause %}
              {% set has_order_clause = 'order by'in join_clause %}
              {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
              {% set has_group_clause =  'group by'in join_clause %}
              {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
              {% set has_qualify_clause =  'qualify'in join_clause %}
              {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}

             

              {% set clause='default' %}

              {% if has_where_clause %}

                  {% set keyword='where'%} 
                  {% set clause='where_clause' %}
    
              {% elif  has_WHERE_clause %}

                   {% set keyword='WHERE'%}
                   {% set clause='where_clause' %}
              {% endif %}

              {% if has_group_clause and clause != 'where_clause'  %}

                   {% set keyword='group by'%}
                   {% set clause='group_clause' %}
              
              {% elif  has_GROUP_clause and clause != 'where_clause' %}

                   {% set keyword='GROUP BY'%}
                   {% set clause='group_clause' %}

              {% endif %}
  			
              {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                   {% set keyword='qualify'%}
                   {% set clause='qualify_clause' %}
              
              {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                   {% set keyword='QUALIFY'%}
                   {% set clause='qualify_clause' %}

              {% endif %}            

  			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                   {% set keyword='order by'%}
                   {% set clause='order_clause' %}
              
              {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                   {% set keyword='ORDER BY'%}
                   {% set clause='order_clause' %}

              {% endif %}



              {% if clause == 'where_clause' %}
                 {% set parts = join_clause.split(keyword) %}
                 {% set from_clause = parts[0] %}
                 {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}

              {% elif clause == 'group_clause' %}

                 {% set parts = join_clause.split(keyword) %}
                 {% set from_clause = parts[0] %}
                 {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}

              
              {% elif clause == 'qualify_clause' %}

                 {% set parts = join_clause.split(keyword) %}
                 {% set from_clause = parts[0] %}
                 {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}


              {% elif clause == 'order_clause' %}

                 {% set parts = join_clause.split(keyword) %}
                 {% set from_clause = parts[0] %}
                 {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                 

              {% else %}

                 {% set from_clause = join_clause %}
                 {% set add_clause = '' %}

              {% endif %}
  			
  			{% if ret_clause == 'from' %}
  			   {{ from_clause }}
  			{% else %}
  			   {{ add_clause }}
  			{% endif %}
  			
  			
  {%- endmacro -%}


  {%- macro ref_raw(location_name, node_name) -%}
      {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
  {%- endmacro -%}


  {%- macro ref_no_link_raw(location_name, node_name) -%}
      {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
  {%- endmacro -%}


  {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}

  {%- macro partition_by() -%}

      {%- set nsVariables = namespace(partition="") -%}
      {%- set sourceTableName = node.name -%}

      {%- for i in config.partitionBy.get('items') -%}
          {%- set colName = i.partColName.name -%}
          {%- if loop.first -%}
              {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
          {%- endif -%}

      {%- endfor -%}

      {{- nsVariables.partition -}}
  {%- endmacro -%}

  {% macro order_by_col(return) %}

      {% set nsVariables = namespace(orderBy="") -%}

      {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
          {% set datetimeNumericColSort = config.orderBy.get('items') -%}
          {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
          {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
      {% else -%}
          {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
          {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
          {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
          {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
      {% endif -%}

      {{ nsVariables.orderBy }}

  {% endmacro %}


  {% macro dimensionHistoryPk() %}
      {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

      {%- set partitionBy = partition_by().split(",") -%}
      {%- set orderBy = order_by_col() -%}

      {%- for col in partitionBy -%}
          {%- if loop.first -%}
              {%- set nsVariables.dimensionHistoryColumns = col -%}
          {%- else -%}
              {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
          {%- endif -%}
      {%- endfor -%}

      {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

      {{- nsVariables.dimensionHistoryColumns -}}

  {% endmacro %}


  {%- macro getColumnId( colName ) -%}

      {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

      {{- columnId -}}

  {%- endmacro -%}

  {% macro getSourceNameFromColumnName( colName ) %}

      {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

      "{{- sourceObject -}}"

  {% endmacro %}
name: macro
type: Macro
